{"version":3,"sources":["./$_lazy_route_resource lazy namespace object","./node_modules/moment/locale sync ^\\.\\/.*$","./src/app/app.component.html","./src/app/app.component.ts","./src/app/app.module.ts","./src/app/chat-message/chat-message.component.html","./src/app/chat-message/chat-message.component.ts","./src/app/chat-nav-bar/chat-nav-bar.component.html","./src/app/chat-nav-bar/chat-nav-bar.component.ts","./src/app/chat-page/chat-page.component.html","./src/app/chat-page/chat-page.component.ts","./src/app/chat-thread/chat-thread.component.html","./src/app/chat-thread/chat-thread.component.ts","./src/app/chat-threads/chat-threads.component.html","./src/app/chat-threads/chat-threads.component.ts","./src/app/chat-window/chat-window.component.html","./src/app/chat-window/chat-window.component.ts","./src/app/data/chat-example-data.ts","./src/app/message/message.model.ts","./src/app/message/messages.service.ts","./src/app/pipes/from-now.pipe.ts","./src/app/thread/thread.model.ts","./src/app/thread/threads.service.ts","./src/app/user/user.model.ts","./src/app/user/users.service.ts","./src/app/util/uuid.ts","./src/environments/environment.ts","./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","var map = {\n\t\"./af\": \"./node_modules/moment/locale/af.js\",\n\t\"./af.js\": \"./node_modules/moment/locale/af.js\",\n\t\"./ar\": \"./node_modules/moment/locale/ar.js\",\n\t\"./ar-dz\": \"./node_modules/moment/locale/ar-dz.js\",\n\t\"./ar-dz.js\": \"./node_modules/moment/locale/ar-dz.js\",\n\t\"./ar-kw\": \"./node_modules/moment/locale/ar-kw.js\",\n\t\"./ar-kw.js\": \"./node_modules/moment/locale/ar-kw.js\",\n\t\"./ar-ly\": \"./node_modules/moment/locale/ar-ly.js\",\n\t\"./ar-ly.js\": \"./node_modules/moment/locale/ar-ly.js\",\n\t\"./ar-ma\": \"./node_modules/moment/locale/ar-ma.js\",\n\t\"./ar-ma.js\": \"./node_modules/moment/locale/ar-ma.js\",\n\t\"./ar-sa\": \"./node_modules/moment/locale/ar-sa.js\",\n\t\"./ar-sa.js\": \"./node_modules/moment/locale/ar-sa.js\",\n\t\"./ar-tn\": \"./node_modules/moment/locale/ar-tn.js\",\n\t\"./ar-tn.js\": \"./node_modules/moment/locale/ar-tn.js\",\n\t\"./ar.js\": \"./node_modules/moment/locale/ar.js\",\n\t\"./az\": \"./node_modules/moment/locale/az.js\",\n\t\"./az.js\": \"./node_modules/moment/locale/az.js\",\n\t\"./be\": \"./node_modules/moment/locale/be.js\",\n\t\"./be.js\": \"./node_modules/moment/locale/be.js\",\n\t\"./bg\": \"./node_modules/moment/locale/bg.js\",\n\t\"./bg.js\": \"./node_modules/moment/locale/bg.js\",\n\t\"./bm\": \"./node_modules/moment/locale/bm.js\",\n\t\"./bm.js\": \"./node_modules/moment/locale/bm.js\",\n\t\"./bn\": \"./node_modules/moment/locale/bn.js\",\n\t\"./bn.js\": \"./node_modules/moment/locale/bn.js\",\n\t\"./bo\": \"./node_modules/moment/locale/bo.js\",\n\t\"./bo.js\": \"./node_modules/moment/locale/bo.js\",\n\t\"./br\": \"./node_modules/moment/locale/br.js\",\n\t\"./br.js\": \"./node_modules/moment/locale/br.js\",\n\t\"./bs\": \"./node_modules/moment/locale/bs.js\",\n\t\"./bs.js\": \"./node_modules/moment/locale/bs.js\",\n\t\"./ca\": \"./node_modules/moment/locale/ca.js\",\n\t\"./ca.js\": \"./node_modules/moment/locale/ca.js\",\n\t\"./cs\": \"./node_modules/moment/locale/cs.js\",\n\t\"./cs.js\": \"./node_modules/moment/locale/cs.js\",\n\t\"./cv\": \"./node_modules/moment/locale/cv.js\",\n\t\"./cv.js\": \"./node_modules/moment/locale/cv.js\",\n\t\"./cy\": \"./node_modules/moment/locale/cy.js\",\n\t\"./cy.js\": \"./node_modules/moment/locale/cy.js\",\n\t\"./da\": \"./node_modules/moment/locale/da.js\",\n\t\"./da.js\": \"./node_modules/moment/locale/da.js\",\n\t\"./de\": \"./node_modules/moment/locale/de.js\",\n\t\"./de-at\": \"./node_modules/moment/locale/de-at.js\",\n\t\"./de-at.js\": \"./node_modules/moment/locale/de-at.js\",\n\t\"./de-ch\": \"./node_modules/moment/locale/de-ch.js\",\n\t\"./de-ch.js\": \"./node_modules/moment/locale/de-ch.js\",\n\t\"./de.js\": \"./node_modules/moment/locale/de.js\",\n\t\"./dv\": \"./node_modules/moment/locale/dv.js\",\n\t\"./dv.js\": \"./node_modules/moment/locale/dv.js\",\n\t\"./el\": \"./node_modules/moment/locale/el.js\",\n\t\"./el.js\": \"./node_modules/moment/locale/el.js\",\n\t\"./en-SG\": \"./node_modules/moment/locale/en-SG.js\",\n\t\"./en-SG.js\": \"./node_modules/moment/locale/en-SG.js\",\n\t\"./en-au\": \"./node_modules/moment/locale/en-au.js\",\n\t\"./en-au.js\": \"./node_modules/moment/locale/en-au.js\",\n\t\"./en-ca\": \"./node_modules/moment/locale/en-ca.js\",\n\t\"./en-ca.js\": \"./node_modules/moment/locale/en-ca.js\",\n\t\"./en-gb\": \"./node_modules/moment/locale/en-gb.js\",\n\t\"./en-gb.js\": \"./node_modules/moment/locale/en-gb.js\",\n\t\"./en-ie\": \"./node_modules/moment/locale/en-ie.js\",\n\t\"./en-ie.js\": \"./node_modules/moment/locale/en-ie.js\",\n\t\"./en-il\": \"./node_modules/moment/locale/en-il.js\",\n\t\"./en-il.js\": \"./node_modules/moment/locale/en-il.js\",\n\t\"./en-nz\": \"./node_modules/moment/locale/en-nz.js\",\n\t\"./en-nz.js\": \"./node_modules/moment/locale/en-nz.js\",\n\t\"./eo\": \"./node_modules/moment/locale/eo.js\",\n\t\"./eo.js\": \"./node_modules/moment/locale/eo.js\",\n\t\"./es\": \"./node_modules/moment/locale/es.js\",\n\t\"./es-do\": \"./node_modules/moment/locale/es-do.js\",\n\t\"./es-do.js\": \"./node_modules/moment/locale/es-do.js\",\n\t\"./es-us\": \"./node_modules/moment/locale/es-us.js\",\n\t\"./es-us.js\": \"./node_modules/moment/locale/es-us.js\",\n\t\"./es.js\": \"./node_modules/moment/locale/es.js\",\n\t\"./et\": \"./node_modules/moment/locale/et.js\",\n\t\"./et.js\": \"./node_modules/moment/locale/et.js\",\n\t\"./eu\": \"./node_modules/moment/locale/eu.js\",\n\t\"./eu.js\": \"./node_modules/moment/locale/eu.js\",\n\t\"./fa\": \"./node_modules/moment/locale/fa.js\",\n\t\"./fa.js\": \"./node_modules/moment/locale/fa.js\",\n\t\"./fi\": \"./node_modules/moment/locale/fi.js\",\n\t\"./fi.js\": \"./node_modules/moment/locale/fi.js\",\n\t\"./fo\": \"./node_modules/moment/locale/fo.js\",\n\t\"./fo.js\": \"./node_modules/moment/locale/fo.js\",\n\t\"./fr\": \"./node_modules/moment/locale/fr.js\",\n\t\"./fr-ca\": \"./node_modules/moment/locale/fr-ca.js\",\n\t\"./fr-ca.js\": \"./node_modules/moment/locale/fr-ca.js\",\n\t\"./fr-ch\": \"./node_modules/moment/locale/fr-ch.js\",\n\t\"./fr-ch.js\": \"./node_modules/moment/locale/fr-ch.js\",\n\t\"./fr.js\": \"./node_modules/moment/locale/fr.js\",\n\t\"./fy\": \"./node_modules/moment/locale/fy.js\",\n\t\"./fy.js\": \"./node_modules/moment/locale/fy.js\",\n\t\"./ga\": \"./node_modules/moment/locale/ga.js\",\n\t\"./ga.js\": \"./node_modules/moment/locale/ga.js\",\n\t\"./gd\": \"./node_modules/moment/locale/gd.js\",\n\t\"./gd.js\": \"./node_modules/moment/locale/gd.js\",\n\t\"./gl\": \"./node_modules/moment/locale/gl.js\",\n\t\"./gl.js\": \"./node_modules/moment/locale/gl.js\",\n\t\"./gom-latn\": \"./node_modules/moment/locale/gom-latn.js\",\n\t\"./gom-latn.js\": \"./node_modules/moment/locale/gom-latn.js\",\n\t\"./gu\": \"./node_modules/moment/locale/gu.js\",\n\t\"./gu.js\": \"./node_modules/moment/locale/gu.js\",\n\t\"./he\": \"./node_modules/moment/locale/he.js\",\n\t\"./he.js\": \"./node_modules/moment/locale/he.js\",\n\t\"./hi\": \"./node_modules/moment/locale/hi.js\",\n\t\"./hi.js\": \"./node_modules/moment/locale/hi.js\",\n\t\"./hr\": \"./node_modules/moment/locale/hr.js\",\n\t\"./hr.js\": \"./node_modules/moment/locale/hr.js\",\n\t\"./hu\": \"./node_modules/moment/locale/hu.js\",\n\t\"./hu.js\": \"./node_modules/moment/locale/hu.js\",\n\t\"./hy-am\": \"./node_modules/moment/locale/hy-am.js\",\n\t\"./hy-am.js\": \"./node_modules/moment/locale/hy-am.js\",\n\t\"./id\": \"./node_modules/moment/locale/id.js\",\n\t\"./id.js\": \"./node_modules/moment/locale/id.js\",\n\t\"./is\": \"./node_modules/moment/locale/is.js\",\n\t\"./is.js\": \"./node_modules/moment/locale/is.js\",\n\t\"./it\": \"./node_modules/moment/locale/it.js\",\n\t\"./it-ch\": \"./node_modules/moment/locale/it-ch.js\",\n\t\"./it-ch.js\": \"./node_modules/moment/locale/it-ch.js\",\n\t\"./it.js\": \"./node_modules/moment/locale/it.js\",\n\t\"./ja\": \"./node_modules/moment/locale/ja.js\",\n\t\"./ja.js\": \"./node_modules/moment/locale/ja.js\",\n\t\"./jv\": \"./node_modules/moment/locale/jv.js\",\n\t\"./jv.js\": \"./node_modules/moment/locale/jv.js\",\n\t\"./ka\": \"./node_modules/moment/locale/ka.js\",\n\t\"./ka.js\": \"./node_modules/moment/locale/ka.js\",\n\t\"./kk\": \"./node_modules/moment/locale/kk.js\",\n\t\"./kk.js\": \"./node_modules/moment/locale/kk.js\",\n\t\"./km\": \"./node_modules/moment/locale/km.js\",\n\t\"./km.js\": \"./node_modules/moment/locale/km.js\",\n\t\"./kn\": \"./node_modules/moment/locale/kn.js\",\n\t\"./kn.js\": \"./node_modules/moment/locale/kn.js\",\n\t\"./ko\": \"./node_modules/moment/locale/ko.js\",\n\t\"./ko.js\": \"./node_modules/moment/locale/ko.js\",\n\t\"./ku\": \"./node_modules/moment/locale/ku.js\",\n\t\"./ku.js\": \"./node_modules/moment/locale/ku.js\",\n\t\"./ky\": \"./node_modules/moment/locale/ky.js\",\n\t\"./ky.js\": \"./node_modules/moment/locale/ky.js\",\n\t\"./lb\": \"./node_modules/moment/locale/lb.js\",\n\t\"./lb.js\": \"./node_modules/moment/locale/lb.js\",\n\t\"./lo\": \"./node_modules/moment/locale/lo.js\",\n\t\"./lo.js\": \"./node_modules/moment/locale/lo.js\",\n\t\"./lt\": \"./node_modules/moment/locale/lt.js\",\n\t\"./lt.js\": \"./node_modules/moment/locale/lt.js\",\n\t\"./lv\": \"./node_modules/moment/locale/lv.js\",\n\t\"./lv.js\": \"./node_modules/moment/locale/lv.js\",\n\t\"./me\": \"./node_modules/moment/locale/me.js\",\n\t\"./me.js\": \"./node_modules/moment/locale/me.js\",\n\t\"./mi\": \"./node_modules/moment/locale/mi.js\",\n\t\"./mi.js\": \"./node_modules/moment/locale/mi.js\",\n\t\"./mk\": \"./node_modules/moment/locale/mk.js\",\n\t\"./mk.js\": \"./node_modules/moment/locale/mk.js\",\n\t\"./ml\": \"./node_modules/moment/locale/ml.js\",\n\t\"./ml.js\": \"./node_modules/moment/locale/ml.js\",\n\t\"./mn\": \"./node_modules/moment/locale/mn.js\",\n\t\"./mn.js\": \"./node_modules/moment/locale/mn.js\",\n\t\"./mr\": \"./node_modules/moment/locale/mr.js\",\n\t\"./mr.js\": \"./node_modules/moment/locale/mr.js\",\n\t\"./ms\": \"./node_modules/moment/locale/ms.js\",\n\t\"./ms-my\": \"./node_modules/moment/locale/ms-my.js\",\n\t\"./ms-my.js\": \"./node_modules/moment/locale/ms-my.js\",\n\t\"./ms.js\": \"./node_modules/moment/locale/ms.js\",\n\t\"./mt\": \"./node_modules/moment/locale/mt.js\",\n\t\"./mt.js\": \"./node_modules/moment/locale/mt.js\",\n\t\"./my\": \"./node_modules/moment/locale/my.js\",\n\t\"./my.js\": \"./node_modules/moment/locale/my.js\",\n\t\"./nb\": \"./node_modules/moment/locale/nb.js\",\n\t\"./nb.js\": \"./node_modules/moment/locale/nb.js\",\n\t\"./ne\": \"./node_modules/moment/locale/ne.js\",\n\t\"./ne.js\": \"./node_modules/moment/locale/ne.js\",\n\t\"./nl\": \"./node_modules/moment/locale/nl.js\",\n\t\"./nl-be\": \"./node_modules/moment/locale/nl-be.js\",\n\t\"./nl-be.js\": \"./node_modules/moment/locale/nl-be.js\",\n\t\"./nl.js\": \"./node_modules/moment/locale/nl.js\",\n\t\"./nn\": \"./node_modules/moment/locale/nn.js\",\n\t\"./nn.js\": \"./node_modules/moment/locale/nn.js\",\n\t\"./pa-in\": \"./node_modules/moment/locale/pa-in.js\",\n\t\"./pa-in.js\": \"./node_modules/moment/locale/pa-in.js\",\n\t\"./pl\": \"./node_modules/moment/locale/pl.js\",\n\t\"./pl.js\": \"./node_modules/moment/locale/pl.js\",\n\t\"./pt\": \"./node_modules/moment/locale/pt.js\",\n\t\"./pt-br\": \"./node_modules/moment/locale/pt-br.js\",\n\t\"./pt-br.js\": \"./node_modules/moment/locale/pt-br.js\",\n\t\"./pt.js\": \"./node_modules/moment/locale/pt.js\",\n\t\"./ro\": \"./node_modules/moment/locale/ro.js\",\n\t\"./ro.js\": \"./node_modules/moment/locale/ro.js\",\n\t\"./ru\": \"./node_modules/moment/locale/ru.js\",\n\t\"./ru.js\": \"./node_modules/moment/locale/ru.js\",\n\t\"./sd\": \"./node_modules/moment/locale/sd.js\",\n\t\"./sd.js\": \"./node_modules/moment/locale/sd.js\",\n\t\"./se\": \"./node_modules/moment/locale/se.js\",\n\t\"./se.js\": \"./node_modules/moment/locale/se.js\",\n\t\"./si\": \"./node_modules/moment/locale/si.js\",\n\t\"./si.js\": \"./node_modules/moment/locale/si.js\",\n\t\"./sk\": \"./node_modules/moment/locale/sk.js\",\n\t\"./sk.js\": \"./node_modules/moment/locale/sk.js\",\n\t\"./sl\": \"./node_modules/moment/locale/sl.js\",\n\t\"./sl.js\": \"./node_modules/moment/locale/sl.js\",\n\t\"./sq\": \"./node_modules/moment/locale/sq.js\",\n\t\"./sq.js\": \"./node_modules/moment/locale/sq.js\",\n\t\"./sr\": \"./node_modules/moment/locale/sr.js\",\n\t\"./sr-cyrl\": \"./node_modules/moment/locale/sr-cyrl.js\",\n\t\"./sr-cyrl.js\": \"./node_modules/moment/locale/sr-cyrl.js\",\n\t\"./sr.js\": \"./node_modules/moment/locale/sr.js\",\n\t\"./ss\": \"./node_modules/moment/locale/ss.js\",\n\t\"./ss.js\": \"./node_modules/moment/locale/ss.js\",\n\t\"./sv\": \"./node_modules/moment/locale/sv.js\",\n\t\"./sv.js\": \"./node_modules/moment/locale/sv.js\",\n\t\"./sw\": \"./node_modules/moment/locale/sw.js\",\n\t\"./sw.js\": \"./node_modules/moment/locale/sw.js\",\n\t\"./ta\": \"./node_modules/moment/locale/ta.js\",\n\t\"./ta.js\": \"./node_modules/moment/locale/ta.js\",\n\t\"./te\": \"./node_modules/moment/locale/te.js\",\n\t\"./te.js\": \"./node_modules/moment/locale/te.js\",\n\t\"./tet\": \"./node_modules/moment/locale/tet.js\",\n\t\"./tet.js\": \"./node_modules/moment/locale/tet.js\",\n\t\"./tg\": \"./node_modules/moment/locale/tg.js\",\n\t\"./tg.js\": \"./node_modules/moment/locale/tg.js\",\n\t\"./th\": \"./node_modules/moment/locale/th.js\",\n\t\"./th.js\": \"./node_modules/moment/locale/th.js\",\n\t\"./tl-ph\": \"./node_modules/moment/locale/tl-ph.js\",\n\t\"./tl-ph.js\": \"./node_modules/moment/locale/tl-ph.js\",\n\t\"./tlh\": \"./node_modules/moment/locale/tlh.js\",\n\t\"./tlh.js\": \"./node_modules/moment/locale/tlh.js\",\n\t\"./tr\": \"./node_modules/moment/locale/tr.js\",\n\t\"./tr.js\": \"./node_modules/moment/locale/tr.js\",\n\t\"./tzl\": \"./node_modules/moment/locale/tzl.js\",\n\t\"./tzl.js\": \"./node_modules/moment/locale/tzl.js\",\n\t\"./tzm\": \"./node_modules/moment/locale/tzm.js\",\n\t\"./tzm-latn\": \"./node_modules/moment/locale/tzm-latn.js\",\n\t\"./tzm-latn.js\": \"./node_modules/moment/locale/tzm-latn.js\",\n\t\"./tzm.js\": \"./node_modules/moment/locale/tzm.js\",\n\t\"./ug-cn\": \"./node_modules/moment/locale/ug-cn.js\",\n\t\"./ug-cn.js\": \"./node_modules/moment/locale/ug-cn.js\",\n\t\"./uk\": \"./node_modules/moment/locale/uk.js\",\n\t\"./uk.js\": \"./node_modules/moment/locale/uk.js\",\n\t\"./ur\": \"./node_modules/moment/locale/ur.js\",\n\t\"./ur.js\": \"./node_modules/moment/locale/ur.js\",\n\t\"./uz\": \"./node_modules/moment/locale/uz.js\",\n\t\"./uz-latn\": \"./node_modules/moment/locale/uz-latn.js\",\n\t\"./uz-latn.js\": \"./node_modules/moment/locale/uz-latn.js\",\n\t\"./uz.js\": \"./node_modules/moment/locale/uz.js\",\n\t\"./vi\": \"./node_modules/moment/locale/vi.js\",\n\t\"./vi.js\": \"./node_modules/moment/locale/vi.js\",\n\t\"./x-pseudo\": \"./node_modules/moment/locale/x-pseudo.js\",\n\t\"./x-pseudo.js\": \"./node_modules/moment/locale/x-pseudo.js\",\n\t\"./yo\": \"./node_modules/moment/locale/yo.js\",\n\t\"./yo.js\": \"./node_modules/moment/locale/yo.js\",\n\t\"./zh-cn\": \"./node_modules/moment/locale/zh-cn.js\",\n\t\"./zh-cn.js\": \"./node_modules/moment/locale/zh-cn.js\",\n\t\"./zh-hk\": \"./node_modules/moment/locale/zh-hk.js\",\n\t\"./zh-hk.js\": \"./node_modules/moment/locale/zh-hk.js\",\n\t\"./zh-tw\": \"./node_modules/moment/locale/zh-tw.js\",\n\t\"./zh-tw.js\": \"./node_modules/moment/locale/zh-tw.js\"\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = \"./node_modules/moment/locale sync recursive ^\\\\.\\\\/.*$\";","<div>\r\n  <chat-page></chat-page>\r\n</div>\r\n","import { Component, Inject } from '@angular/core';\r\nimport { ChatExampleData } from './data/chat-example-data';\r\n\r\nimport { UsersService } from './user/users.service';\r\nimport { ThreadsService } from './thread/threads.service';\r\nimport { MessagesService } from './message/messages.service';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent {\r\n    constructor(public messagesService: MessagesService,\r\n              public threadsService: ThreadsService,\r\n              public usersService: UsersService) {\r\n    ChatExampleData.init(messagesService, threadsService, usersService);\r\n  }\r\n}\r\n","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { HttpClientModule } from \"@angular/common/http\";\r\n\r\nimport { UsersService } from './user/users.service';\r\nimport { ThreadsService } from './thread/threads.service';\r\nimport { MessagesService } from './message/messages.service';\r\n\r\nimport { AppComponent } from './app.component';\r\nimport { ChatMessageComponent } from './chat-message/chat-message.component';\r\nimport { ChatThreadComponent } from './chat-thread/chat-thread.component';\r\nimport { ChatNavBarComponent } from './chat-nav-bar/chat-nav-bar.component';\r\nimport { ChatThreadsComponent } from './chat-threads/chat-threads.component';\r\nimport { ChatWindowComponent } from './chat-window/chat-window.component';\r\nimport { ChatPageComponent } from './chat-page/chat-page.component';\r\nimport { FromNowPipe } from './pipes/from-now.pipe';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    ChatMessageComponent,\r\n    ChatThreadComponent,\r\n    ChatNavBarComponent,\r\n    ChatThreadsComponent,\r\n    ChatWindowComponent,\r\n    ChatPageComponent,\r\n    FromNowPipe\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    FormsModule,\r\n    HttpClientModule\r\n  ],\r\n  providers: [\r\n    MessagesService, ThreadsService, UsersService\r\n  ],\r\n\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","<div class=\"msg-container\"\r\n     [ngClass]=\"{'base-sent': !incoming, 'base-receive': incoming}\">\r\n\r\n  <div class=\"avatar\"\r\n       *ngIf=\"!incoming\">\r\n    <img src=\"{{message.author.avatarSrc}}\">\r\n  </div>\r\n\r\n  <div class=\"messages\"\r\n    [ngClass]=\"{'msg-sent': !incoming, 'msg-receive': incoming}\">\r\n    <p>{{message.text}}</p>\r\n    <p class=\"time\">{{message.author}} • {{message.sentAt | fromNow}}</p>\r\n  </div>\r\n\r\n  <div class=\"avatar\"\r\n       *ngIf=\"incoming\">\r\n    <img src=\"{{message.author.avatarSrc}}\">\r\n  </div>\r\n</div>\r\n","import {\r\n  Component,\r\n  OnInit,\r\n  Input\r\n} from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { UsersService } from './../user/users.service';\r\nimport { ThreadsService } from './../thread/threads.service';\r\nimport { MessagesService } from './../message/messages.service';\r\n\r\nimport { Message } from './../message/message.model';\r\nimport { Thread } from './../thread/thread.model';\r\nimport { User } from './../user/user.model';\r\n\r\n@Component({\r\n  selector: 'chat-message',\r\n  templateUrl: './chat-message.component.html',\r\n  styleUrls: ['./chat-message.component.css']\r\n})\r\nexport class ChatMessageComponent implements OnInit {\r\n  @Input() message: Message;\r\n  currentUser: User;\r\n  incoming: boolean;\r\n\r\n  constructor(public UsersService: UsersService) {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.UsersService.currentUser\r\n      .subscribe(\r\n        (user: User) => {\r\n          this.currentUser = user;\r\n          if (this.message.author && user) {\r\n            this.incoming = this.message.author.id !== user.id;\r\n          }\r\n        });\r\n  }\r\n}\r\n","<nav class=\"navbar navbar-default\">\r\n  <div class=\"container-fluid\">\r\n    <div class=\"navbar-header\">\r\n      <a class=\"navbar-brand\" href=\"https://ng-book.com/2\">\r\n        <img src=\"assets/images/logos/ng-book-2-minibook.png\"/>\r\n         ng-book 2\r\n      </a>\r\n    </div>\r\n    <p class=\"navbar-text navbar-right\">\r\n      <button class=\"btn btn-primary\" type=\"button\">\r\n        Messages <span class=\"badge\">{{ unreadMessagesCount }}</span>\r\n      </button>\r\n    </p>\r\n  </div>\r\n</nav>\r\n","import {\r\n  Component,\r\n  Inject,\r\n  OnInit\r\n} from '@angular/core';\r\nimport * as _ from 'lodash';\r\n\r\nimport { ThreadsService } from './../thread/threads.service';\r\nimport { MessagesService } from './../message/messages.service';\r\n\r\nimport { Thread } from './../thread/thread.model';\r\nimport { Message } from './../message/message.model';\r\n\r\n@Component({\r\n  selector: 'chat-nav-bar',\r\n  templateUrl: './chat-nav-bar.component.html',\r\n  styleUrls: ['./chat-nav-bar.component.css']\r\n})\r\nexport class ChatNavBarComponent implements OnInit {\r\n  unreadMessagesCount: number;\r\n\r\n  constructor(public messagesService: MessagesService,\r\n              public threadsService: ThreadsService) {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.messagesService.messages\r\n      .combineLatest(\r\n        this.threadsService.currentThread,\r\n        (messages: Message[], currentThread: Thread) =>\r\n          [currentThread, messages] as [Thread, Message[]] )\r\n\r\n      .subscribe(([currentThread, messages]: [Thread, Message[]]) => {\r\n        this.unreadMessagesCount =\r\n          _.reduce(\r\n            messages,\r\n            (sum: number, m: Message) => {\r\n              const messageIsInCurrentThread: boolean = m.thread &&\r\n                currentThread &&\r\n                (currentThread.id === m.thread.id);\r\n              // note: in a \"real\" app you should also exclude\r\n              // messages that were authored by the current user b/c they've\r\n              // already been \"read\"\r\n              if (m && !m.isRead && !messageIsInCurrentThread) {\r\n                sum = sum + 1;\r\n              }\r\n              return sum;\r\n            },\r\n            0);\r\n      });\r\n  }\r\n}\r\n","<div>\r\n  <chat-nav-bar></chat-nav-bar>\r\n  <div class=\"container\">\r\n    <chat-threads></chat-threads>\r\n    <chat-window></chat-window>\r\n  </div>\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'chat-page',\r\n  templateUrl: './chat-page.component.html',\r\n  styleUrls: ['./chat-page.component.css']\r\n})\r\nexport class ChatPageComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","<div class=\"media conversation\">\r\n  <div class=\"pull-left\">\r\n    <img class=\"media-object avatar\"\r\n         src=\"{{thread.avatarSrc}}\">\r\n  </div>\r\n  <div class=\"media-body\">\r\n    <h5 class=\"media-heading contact-name\">{{thread.name}}\r\n      <span *ngIf=\"selected\">&bull;</span>\r\n    </h5>\r\n    <small class=\"message-preview\">{{thread.lastMessage.text}}</small>\r\n  </div>\r\n  <a (click)=\"clicked($event)\" class=\"div-link\">Select</a>\r\n</div>\r\n","import {\r\n  Component,\r\n  OnInit,\r\n  Input,\r\n  Output,\r\n  EventEmitter\r\n} from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { ThreadsService } from './../thread/threads.service';\r\nimport { Thread } from '../thread/thread.model';\r\n\r\n@Component({\r\n  selector: 'chat-thread',\r\n  templateUrl: './chat-thread.component.html',\r\n  styleUrls: ['./chat-thread.component.css']\r\n})\r\nexport class ChatThreadComponent implements OnInit {\r\n  @Input() thread: Thread;\r\n  selected = false;\r\n\r\n  constructor(public threadsService: ThreadsService) {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.threadsService.currentThread\r\n      .subscribe( (currentThread: Thread) => {\r\n        this.selected = currentThread &&\r\n          this.thread &&\r\n          (currentThread.id === this.thread.id);\r\n      });\r\n  }\r\n\r\n  clicked(event: any): void {\r\n    this.threadsService.setCurrentThread(this.thread);\r\n    event.preventDefault();\r\n  }\r\n}\r\n","<!-- conversations -->\r\n<div class=\"row\">\r\n  <div class=\"conversation-wrap\">\r\n\r\n    <chat-thread\r\n         *ngFor=\"let thread of threads | async\"\r\n         [thread]=\"thread\">\r\n    </chat-thread>\r\n\r\n  </div>\r\n</div>\r\n","import {\r\n  Component,\r\n  OnInit,\r\n  Inject\r\n} from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { Thread } from '../thread/thread.model';\r\nimport { ThreadsService } from './../thread/threads.service';\r\n\r\n@Component({\r\n  selector: 'chat-threads',\r\n  templateUrl: './chat-threads.component.html',\r\n  styleUrls: ['./chat-threads.component.css']\r\n})\r\nexport class ChatThreadsComponent {\r\n  threads: Observable<any>;\r\n\r\n  constructor(public threadsService: ThreadsService) {\r\n    this.threads = threadsService.orderedThreads;\r\n  }\r\n}\r\n","<div class=\"chat-window-container\">\r\n  <div class=\"chat-window\">\r\n    <div class=\"panel-container\">\r\n      <div class=\"panel panel-default\">\r\n\r\n        <div class=\"panel-heading top-bar\">\r\n          <div class=\"panel-title-container\">\r\n            <h3 class=\"panel-title\">\r\n              <span class=\"glyphicon glyphicon-comment\"></span>\r\n              Chat - {{currentThread.name}}\r\n            </h3>\r\n          </div>\r\n          <div class=\"panel-buttons-container\">\r\n            <!-- you could put minimize or close buttons here -->\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"panel-body msg-container-base\">\r\n          <chat-message\r\n          *ngFor=\"let message of messages | async\"\r\n          [message]=\"message\">\r\n        </chat-message>\r\n      </div>\r\n\r\n      <div class=\"panel-footer\">\r\n        <div class=\"input-group\">\r\n          <input type=\"text\"\r\n          class=\"chat-input\"\r\n          placeholder=\"Write your message here...\"\r\n          (keydown.enter)=\"onEnter($event)\"\r\n          [(ngModel)]=\"draftMessage.text\" />\r\n          <span class=\"input-group-btn\">\r\n            <button class=\"btn-chat\"\r\n            (click)=\"onEnter($event)\"\r\n            >Send</button>\r\n          </span>\r\n        </div>\r\n      </div>\r\n\r\n    </div>\r\n  </div>\r\n</div>\r\n","import {\r\n  Component,\r\n  Inject,\r\n  ElementRef,\r\n  OnInit,\r\n  ChangeDetectionStrategy\r\n} from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { User } from '../user/user.model';\r\nimport { UsersService } from '../user/users.service';\r\nimport { Thread } from '../thread/thread.model';\r\nimport { ThreadsService } from '../thread/threads.service';\r\nimport { Message } from '../message/message.model';\r\nimport { MessagesService } from '../message/messages.service';\r\n\r\n@Component({\r\n  selector: 'chat-window',\r\n  templateUrl: './chat-window.component.html',\r\n  styleUrls: ['./chat-window.component.css'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class ChatWindowComponent implements OnInit {\r\n  messages: Observable<any>;\r\n  currentThread: Thread;\r\n  draftMessage: Message;\r\n  currentUser: User;\r\n\r\n  constructor(public messagesService: MessagesService,\r\n              public threadsService: ThreadsService,\r\n              public UsersService: UsersService,\r\n              public el: ElementRef) {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.messages = this.threadsService.currentThreadMessages;\r\n\r\n    this.draftMessage = new Message();\r\n\r\n    this.threadsService.currentThread.subscribe(\r\n      (thread: Thread) => {\r\n        this.currentThread = thread;\r\n      });\r\n\r\n    this.UsersService.currentUser\r\n      .subscribe(\r\n        (user: User) => {\r\n          this.currentUser = user;\r\n        });\r\n\r\n    this.messages\r\n      .subscribe(\r\n        (messages: Array<Message>) => {\r\n          setTimeout(() => {\r\n            this.scrollToBottom();\r\n          });\r\n        });\r\n  }\r\n\r\n  onEnter(event: any): void {\r\n    this.sendMessage();\r\n    event.preventDefault();\r\n  }\r\n\r\n  sendMessage(): void {\r\n    const m: Message = this.draftMessage;\r\n    m.author = this.currentUser;\r\n    m.thread = this.currentThread;\r\n    m.isRead = true;\r\n    this.messagesService.addMessage(m);\r\n    this.draftMessage = new Message();\r\n  }\r\n\r\n  scrollToBottom(): void {\r\n    const scrollPane: any = this.el\r\n      .nativeElement.querySelector('.msg-container-base');\r\n    scrollPane.scrollTop = scrollPane.scrollHeight;\r\n  }\r\n}\r\n","/* tslint:disable:max-line-length */\r\nimport { User } from '../user/user.model';\r\nimport { Thread } from '../thread/thread.model';\r\nimport { Message } from '../message/message.model';\r\nimport { MessagesService } from '../message/messages.service';\r\nimport { ThreadsService } from '../thread/threads.service';\r\nimport { UsersService } from '../user/users.service';\r\nimport * as moment from 'moment';\r\n\r\n// the person using the app is Juliet\r\nconst me: User      = new User('Juliet', 'assets/images/avatars/female-avatar-1.png');\r\nconst ladycap: User = new User('Lady Capulet', 'assets/images/avatars/female-avatar-2.png');\r\nconst echo: User    = new User('Echo Bot', 'assets/images/avatars/male-avatar-1.png');\r\nconst rev: User     = new User('Reverse Bot', 'assets/images/avatars/female-avatar-4.png');\r\nconst wait: User    = new User('Waiting Bot', 'assets/images/avatars/male-avatar-2.png');\r\n\r\nconst tLadycap: Thread = new Thread('tLadycap', ladycap.name, ladycap.avatarSrc);\r\nconst tEcho: Thread    = new Thread('tEcho', echo.name, echo.avatarSrc);\r\nconst tRev: Thread     = new Thread('tRev', rev.name, rev.avatarSrc);\r\nconst tWait: Thread    = new Thread('tWait', wait.name, wait.avatarSrc);\r\n\r\nconst initialMessages: Array<Message> = [\r\n  new Message({\r\n    author: me,\r\n    sentAt: moment().subtract(45, 'minutes').toDate(),\r\n    text: 'Yet let me weep for such a feeling loss.',\r\n    thread: tLadycap\r\n  }),\r\n  new Message({\r\n    author: ladycap,\r\n    sentAt: moment().subtract(20, 'minutes').toDate(),\r\n    text: 'So shall you feel the loss, but not the friend which you weep for.',\r\n    thread: tLadycap\r\n  }),\r\n  new Message({\r\n    author: echo,\r\n    sentAt: moment().subtract(1, 'minutes').toDate(),\r\n    text: `I\\'ll echo whatever you send me`,\r\n    thread: tEcho\r\n  }),\r\n  new Message({\r\n    author: rev,\r\n    sentAt: moment().subtract(3, 'minutes').toDate(),\r\n    text: `I\\'ll reverse whatever you send me`,\r\n    thread: tRev\r\n  }),\r\n  new Message({\r\n    author: wait,\r\n    sentAt: moment().subtract(4, 'minutes').toDate(),\r\n    text: `I\\'ll wait however many seconds you send to me before responding. Try sending '3'`,\r\n    thread: tWait\r\n  }),\r\n];\r\n\r\nexport class ChatExampleData {\r\n  static init(messagesService: MessagesService,\r\n              threadsService: ThreadsService,\r\n              UsersService: UsersService): void {\r\n\r\n    // TODO make `messages` hot\r\n    messagesService.messages.subscribe(() => ({}));\r\n\r\n    // set \"Juliet\" as the current user\r\n    UsersService.setCurrentUser(me);\r\n\r\n    // create the initial messages\r\n    initialMessages.map( (message: Message) => messagesService.addMessage(message) );\r\n\r\n    threadsService.setCurrentThread(tEcho);\r\n\r\n    this.setupBots(messagesService);\r\n  }\r\n\r\n  static setupBots(messagesService: MessagesService): void {\r\n\r\n    // echo bot\r\n    messagesService.messagesForThreadUser(tEcho, echo)\r\n      .forEach( (message: Message): void => {\r\n        messagesService.addMessage(\r\n          new Message({\r\n            author: echo,\r\n            text: message.text,\r\n            thread: tEcho\r\n          })\r\n        );\r\n      },\r\n                null);\r\n\r\n\r\n    // reverse bot\r\n    messagesService.messagesForThreadUser(tRev, rev)\r\n      .forEach( (message: Message): void => {\r\n        messagesService.addMessage(\r\n          new Message({\r\n            author: rev,\r\n            text: message.text.split('').reverse().join(''),\r\n            thread: tRev\r\n          })\r\n        );\r\n      },\r\n                null);\r\n\r\n    // waiting bot\r\n    messagesService.messagesForThreadUser(tWait, wait)\r\n      .forEach( (message: Message): void => {\r\n\r\n        let waitTime: number = parseInt(message.text, 10);\r\n        let reply: string;\r\n\r\n        if (isNaN(waitTime)) {\r\n          waitTime = 0;\r\n          reply = `I didn\\'t understand ${message.text}. Try sending me a number`;\r\n        } else {\r\n          reply = `I waited ${waitTime} seconds to send you this.`;\r\n        }\r\n\r\n        setTimeout(\r\n          () => {\r\n            messagesService.addMessage(\r\n              new Message({\r\n                author: wait,\r\n                text: reply,\r\n                thread: tWait\r\n              })\r\n            );\r\n          },\r\n          waitTime * 1000);\r\n      },\r\n                null);\r\n\r\n\r\n  }\r\n}\r\n","import { User } from '../user/user.model';\r\nimport { Thread } from '../thread/thread.model';\r\nimport { uuid } from './../util/uuid';\r\n\r\n/**\r\n * Message represents one message being sent in a Thread\r\n */\r\n export class Message {\r\n   id: string;\r\n   sentAt: Date;\r\n   isRead: boolean;\r\n   author: User;\r\n   text: string;\r\n   thread: Thread;\r\n\r\n   constructor(obj?: any) {\r\n     this.id              = obj && obj.id              || uuid();\r\n     this.isRead          = obj && obj.isRead          || false;\r\n     this.sentAt          = obj && obj.sentAt          || new Date();\r\n     this.author          = obj && obj.author          || null;\r\n     this.text            = obj && obj.text            || null;\r\n     this.thread          = obj && obj.thread          || null;\r\n   }\r\n }\r\n","import { Injectable } from '@angular/core';\r\nimport { Subject, Observable } from 'rxjs';\r\nimport { User } from '../user/user.model';\r\nimport { Thread } from '../thread/thread.model';\r\nimport { Message } from '../message/message.model';\r\n\r\nconst initialMessages: Message[] = [];\r\n\r\ninterface IMessagesOperation extends Function {\r\n  (messages: Message[]): Message[];\r\n}\r\n\r\n@Injectable()\r\nexport class MessagesService {\r\n  // a stream that publishes new messages only once\r\n  newMessages: Subject<Message> = new Subject<Message>();\r\n\r\n  // `messages` is a stream that emits an array of the most up to date messages\r\n  messages: Observable<Message[]>;\r\n\r\n  // `updates` receives _operations_ to be applied to our `messages`\r\n  // it's a way we can perform changes on *all* messages (that are currently\r\n  // stored in `messages`)\r\n  updates: Subject<any> = new Subject<any>();\r\n\r\n  // action streams\r\n  create: Subject<Message> = new Subject<Message>();\r\n  markThreadAsRead: Subject<any> = new Subject<any>();\r\n\r\n  constructor() {\r\n    this.messages = this.updates\r\n      // watch the updates and accumulate operations on the messages\r\n      .scan((messages: Message[],\r\n             operation: IMessagesOperation) => {\r\n               return operation(messages);\r\n             },\r\n            initialMessages)\r\n      // make sure we can share the most recent list of messages across anyone\r\n      // who's interested in subscribing and cache the last known list of\r\n      // messages\r\n      .publishReplay(1)\r\n      .refCount();\r\n\r\n    // `create` takes a Message and then puts an operation (the inner function)\r\n    // on the `updates` stream to add the Message to the list of messages.\r\n    //\r\n    // That is, for each item that gets added to `create` (by using `next`)\r\n    // this stream emits a concat operation function.\r\n    //\r\n    // Next we subscribe `this.updates` to listen to this stream, which means\r\n    // that it will receive each operation that is created\r\n    //\r\n    // Note that it would be perfectly acceptable to simply modify the\r\n    // \"addMessage\" function below to simply add the inner operation function to\r\n    // the update stream directly and get rid of this extra action stream\r\n    // entirely. The pros are that it is potentially clearer. The cons are that\r\n    // the stream is no longer composable.\r\n    this.create\r\n      .map( function(message: Message): IMessagesOperation {\r\n        return (messages: Message[]) => {\r\n          return messages.concat(message);\r\n        };\r\n      })\r\n      .subscribe(this.updates);\r\n\r\n    this.newMessages\r\n      .subscribe(this.create);\r\n\r\n    // similarly, `markThreadAsRead` takes a Thread and then puts an operation\r\n    // on the `updates` stream to mark the Messages as read\r\n    this.markThreadAsRead\r\n      .map( (thread: Thread) => {\r\n        return (messages: Message[]) => {\r\n          return messages.map( (message: Message) => {\r\n            // note that we're manipulating `message` directly here. Mutability\r\n            // can be confusing and there are lots of reasons why you might want\r\n            // to, say, copy the Message object or some other 'immutable' here\r\n            if (message.thread.id === thread.id) {\r\n              message.isRead = true;\r\n            }\r\n            return message;\r\n          });\r\n        };\r\n      })\r\n      .subscribe(this.updates);\r\n\r\n  }\r\n\r\n  // an imperative function call to this action stream\r\n  addMessage(message: Message): void {\r\n    this.newMessages.next(message);\r\n  }\r\n\r\n  messagesForThreadUser(thread: Thread, user: User): Observable<Message> {\r\n    return this.newMessages\r\n      .filter((message: Message) => {\r\n               // belongs to this thread\r\n        return (message.thread.id === thread.id) &&\r\n               // and isn't authored by this user\r\n               (message.author.id !== user.id);\r\n      });\r\n  }\r\n}\r\n\r\nexport const messagesServiceInjectables: Array<any> = [\r\n  MessagesService\r\n];\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport * as moment from 'moment';\r\n\r\n/**\r\n * FromNowPipe let's us convert a date into a human-readable relative-time\r\n * such as \"10 minutes ago\".\r\n */\r\n@Pipe({\r\n  name: 'fromNow'\r\n})\r\nexport class FromNowPipe implements PipeTransform {\r\n  transform(value: any, args: Array<any>): string {\r\n    return moment(value).fromNow();\r\n  }\r\n}\r\n\r\nexport const fromNowPipeInjectables: Array<any> = [\r\n  FromNowPipe\r\n];\r\n","import { Message } from '../message/message.model';\r\nimport { uuid } from '../util/uuid';\r\n\r\n/**\r\n * Thread represents a group of Users exchanging Messages\r\n */\r\nexport class Thread {\r\n   id: string;\r\n   // tslint:disable-next-line:variable-name\r\n  private _lastMessage!: Message;\r\n  public get lastMessage(): Message {\r\n    return this._lastMessage;\r\n  }\r\n  public set lastMessage(value: Message) {\r\n    this._lastMessage = value;\r\n  }\r\n   name: string;\r\n   avatarSrc: string;\r\n\r\n   constructor(id?: string,\r\n               name?: string,\r\n               avatarSrc?: string) {\r\n     this.id = id || uuid();\r\n     this.name = name || '';\r\n     this.avatarSrc = avatarSrc || '';\r\n   }\r\n }\r\n","import { Injectable } from '@angular/core';\r\nimport { Subject, BehaviorSubject, Observable } from 'rxjs/Rx';\r\nimport { Thread } from './thread.model';\r\nimport { Message } from '../message/message.model';\r\nimport { MessagesService } from '../message/messages.service';\r\nimport * as _ from 'lodash';\r\n\r\n@Injectable()\r\nexport class ThreadsService {\r\n\r\n  // `threads` is a observable that contains the most up to date list of threads\r\n  threads: Observable<{ [key: string]: Thread }>;\r\n\r\n  // `orderedThreads` contains a newest-first chronological list of threads\r\n  orderedThreads: Observable<Thread[]>;\r\n\r\n  // `currentThread` contains the currently selected thread\r\n  currentThread: Subject<Thread> =\r\n    new BehaviorSubject<Thread>(new Thread());\r\n\r\n  // `currentThreadMessages` contains the set of messages for the currently\r\n  // selected thread\r\n  currentThreadMessages: Observable<Message[]>;\r\n\r\n  constructor(public messagesService: MessagesService) {\r\n\r\n    this.threads = messagesService.messages\r\n      .map( (messages: Message[]) => {\r\n        const threads: {[key: string]: Thread} = {};\r\n        // Store the message's thread in our accumulator `threads`\r\n        messages.map((message: Message) => {\r\n          threads[message.thread.id] = threads[message.thread.id] ||\r\n            message.thread;\r\n\r\n          // Cache the most recent message for each thread\r\n          const messagesThread: Thread = threads[message.thread.id];\r\n          if (!messagesThread.lastMessage ||\r\n              messagesThread.lastMessage.sentAt < message.sentAt) {\r\n            messagesThread.lastMessage = message;\r\n          }\r\n        });\r\n        return threads;\r\n      });\r\n\r\n    this.orderedThreads = this.threads\r\n      .map((threadGroups: { [key: string]: Thread }) => {\r\n        const threads: Thread[] = _.values(threadGroups);\r\n        return _.sortBy(threads, (t: Thread) => t.lastMessage.sentAt).reverse();\r\n      });\r\n\r\n    this.currentThreadMessages = this.currentThread\r\n      .combineLatest(messagesService.messages,\r\n                     (currentThread: Thread, messages: Message[]) => {\r\n        if (currentThread && messages.length > 0) {\r\n          return _.chain(messages)\r\n            .filter((message: Message) =>\r\n                    (message.thread.id === currentThread.id))\r\n            .map((message: Message) => {\r\n              message.isRead = true;\r\n              return message; })\r\n            .value();\r\n        } else {\r\n          return [];\r\n        }\r\n      });\r\n\r\n    this.currentThread.subscribe(this.messagesService.markThreadAsRead);\r\n  }\r\n\r\n  setCurrentThread(newThread: Thread): void {\r\n    this.currentThread.next(newThread);\r\n  }\r\n\r\n}\r\n\r\nexport const threadsServiceInjectables: Array<any> = [\r\n  ThreadsService\r\n];\r\n","import { uuid } from '../util/uuid';\r\n\r\n/**\r\n * A User represents an agent that sends messages\r\n */\r\nexport class User {\r\n  id: string;\r\n\r\n  constructor(public name: string,\r\n              public avatarSrc: string) {\r\n    this.id = uuid();\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Subject, BehaviorSubject } from 'rxjs';\r\nimport { User } from './user.model';\r\n\r\n\r\n/**\r\n * UserService manages our current user\r\n */\r\n@Injectable()\r\nexport class UsersService {\r\n  // `currentUser` contains the current user\r\n  currentUser: Subject<User> = new BehaviorSubject<User>(null);\r\n\r\n  public setCurrentUser(newUser: User): void {\r\n    this.currentUser.next(newUser);\r\n  }\r\n}\r\n\r\nexport const userServiceInjectables: Array<any> = [\r\n  UsersService\r\n];\r\n","/* jshint bitwise:false, node:true */\r\n/* tslint:disable:no-bitwise no-var-keyword typedef */\r\n\r\n// taken from TodoMVC\r\nexport function uuid() {\r\n    var i, random;\r\n    var result = '';\r\n\r\n    for (i = 0; i < 32; i++) {\r\n        random = Math.random() * 16 | 0;\r\n        if (i === 8 || i === 12 || i === 16 || i === 20) {\r\n            result += '-';\r\n        }\r\n        result += (i === 12 ? 4 : (i === 16 ? (random & 3 | 8) : random))\r\n            .toString(16);\r\n    }\r\n\r\n    return result;\r\n};\r\n","// The file contents for the current environment will overwrite these during build.\r\n// The build system defaults to the dev environment which uses `environment.ts`, but if you do\r\n// `ng build --env=prod` then `environment.prod.ts` will be used instead.\r\n// The list of which env maps to which file can be found in `.angular-cli.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule);\r\n"],"sourceRoot":"webpack:///"}